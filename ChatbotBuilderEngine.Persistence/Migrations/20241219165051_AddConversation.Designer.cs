// <auto-generated />
using System;
using ChatbotBuilderEngine.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChatbotBuilderEngine.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241219165051_AddConversation")]
    partial class AddConversation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Chatbots.Chatbot", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Chatbot");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Conversations.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatbotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatbotId");

                    b.ToTable("Conversation");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Conversations.ValueObjects.InputMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("InputMessage");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Conversations.ValueObjects.OutputMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("OutputMessage");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Abstract.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GraphId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Abstract.Port<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Ids.InputPortId>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GraphId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Abstract.Port<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Ids.OutputPortId>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GraphId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Enum", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GraphId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.ToTable("Enum");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Links.DataLink", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GraphId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OutputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.ToTable("DataLink");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Links.FlowLink", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GraphId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OutputNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.ToTable("FlowLink");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Graph", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChatbotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StartNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkflowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChatbotId")
                        .IsUnique()
                        .HasFilter("[ChatbotId] IS NOT NULL");

                    b.HasIndex("ConversationId")
                        .IsUnique()
                        .HasFilter("[ConversationId] IS NOT NULL");

                    b.HasIndex("CurrentNodeId")
                        .IsUnique();

                    b.HasIndex("StartNodeId")
                        .IsUnique();

                    b.HasIndex("WorkflowId")
                        .IsUnique()
                        .HasFilter("[WorkflowId] IS NOT NULL");

                    b.ToTable("Graph");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Interactions.InteractionInput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InputMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InteractionNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InputMessageId")
                        .IsUnique()
                        .HasFilter("[InputMessageId] IS NOT NULL");

                    b.HasIndex("InteractionNodeId")
                        .IsUnique()
                        .HasFilter("[InteractionNodeId] IS NOT NULL");

                    b.ToTable("InteractionInput");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Interactions.InteractionOutput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExpectedOptionMetas")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("OptionExpected")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OutputMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TextExpected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("OutputMessageId")
                        .IsUnique()
                        .HasFilter("[OutputMessageId] IS NOT NULL");

                    b.ToTable("InteractionOutput");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Workflows.Workflow", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Workflow");
                });

            modelBuilder.Entity("ImageOutputPortInputPort", b =>
                {
                    b.Property<Guid>("OutputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OutputPortId", "InputPortId");

                    b.HasIndex("InputPortId");

                    b.ToTable("ImageOutputPortInputPort");
                });

            modelBuilder.Entity("OptionOutputPortInputPort", b =>
                {
                    b.Property<Guid>("OutputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OutputPortId", "InputPortId");

                    b.HasIndex("InputPortId");

                    b.ToTable("OptionOutputPortInputPort");
                });

            modelBuilder.Entity("TextOutputPortInputPort", b =>
                {
                    b.Property<Guid>("OutputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OutputPortId", "InputPortId");

                    b.HasIndex("InputPortId");

                    b.ToTable("TextOutputPortInputPort");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.InteractionNode", b =>
                {
                    b.HasBaseType("ChatbotBuilderEngine.Domain.Graphs.Abstract.Node");

                    b.Property<Guid?>("OutputEnumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OutputOptionMetas")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasIndex("OutputEnumId");

                    b.ToTable("InteractionNode");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.Prompt.PromptNode", b =>
                {
                    b.HasBaseType("ChatbotBuilderEngine.Domain.Graphs.Abstract.Node");

                    b.Property<string>("InjectedTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PromptNode");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.ImageData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderEngine.Domain.Graphs.Abstract.Node");

                    b.ToTable("StaticNode<ImageData>");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.OptionData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderEngine.Domain.Graphs.Abstract.Node");

                    b.ToTable("StaticNode<OptionData>");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.TextData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderEngine.Domain.Graphs.Abstract.Node");

                    b.ToTable("StaticNode<TextData>");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.SwitchNode", b =>
                {
                    b.HasBaseType("ChatbotBuilderEngine.Domain.Graphs.Abstract.Node");

                    b.Property<string>("Bindings")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<Guid>("EnumId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("EnumId");

                    b.ToTable("SwitchNode");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.ImageData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderEngine.Domain.Graphs.Abstract.Port<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Ids.InputPortId>");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("InputPort<ImageData>");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.OptionData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderEngine.Domain.Graphs.Abstract.Port<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Ids.InputPortId>");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("NodeId")
                        .IsUnique()
                        .HasFilter("[NodeId] IS NOT NULL");

                    b.ToTable("InputPort<OptionData>");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.TextData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderEngine.Domain.Graphs.Abstract.Port<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Ids.InputPortId>");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("NodeId")
                        .IsUnique()
                        .HasFilter("[NodeId] IS NOT NULL");

                    b.ToTable("InputPort<TextData>");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.ImageData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderEngine.Domain.Graphs.Abstract.Port<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Ids.OutputPortId>");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("NodeId")
                        .IsUnique()
                        .HasFilter("[NodeId] IS NOT NULL");

                    b.ToTable("OutputPort<ImageData>");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.OptionData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderEngine.Domain.Graphs.Abstract.Port<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Ids.OutputPortId>");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("NodeId")
                        .IsUnique()
                        .HasFilter("[NodeId] IS NOT NULL");

                    b.ToTable("OutputPort<OptionData>");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.TextData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderEngine.Domain.Graphs.Abstract.Port<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Ids.OutputPortId>");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("NodeId")
                        .IsUnique()
                        .HasFilter("[NodeId] IS NOT NULL");

                    b.ToTable("OutputPort<TextData>");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Chatbots.Chatbot", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Workflows.Workflow", null)
                        .WithMany()
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Chatbots.ValueObjects.Version", "Version", b1 =>
                        {
                            b1.Property<Guid>("ChatbotId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Major")
                                .HasColumnType("int");

                            b1.HasKey("ChatbotId");

                            b1.HasIndex("Major")
                                .IsUnique();

                            b1.ToTable("Chatbot");

                            b1.WithOwner()
                                .HasForeignKey("ChatbotId");
                        });

                    b.Navigation("Version")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Conversations.Conversation", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Chatbots.Chatbot", null)
                        .WithMany()
                        .HasForeignKey("ChatbotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Conversations.ValueObjects.InputMessage", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Conversations.Conversation", null)
                        .WithMany("InputMessages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Conversations.ValueObjects.OutputMessage", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Conversations.Conversation", null)
                        .WithMany("OutputMessages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Abstract.Node", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Graph", null)
                        .WithMany("Nodes")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Abstract.Port<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Ids.InputPortId>", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Graph", null)
                        .WithMany("InputPorts")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Abstract.Port<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Ids.OutputPortId>", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Graph", null)
                        .WithMany("OutputPorts")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Enum", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Graph", null)
                        .WithMany("Enums")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("EnumId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EnumId");

                            b1.ToTable("Enum");

                            b1.WithOwner()
                                .HasForeignKey("EnumId");
                        });

                    b.OwnsMany("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.OptionData", "Options", b1 =>
                        {
                            b1.Property<Guid>("EnumId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.HasKey("EnumId", "Id");

                            b1.ToTable("Enum_Options");

                            b1.WithOwner()
                                .HasForeignKey("EnumId");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Options");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Links.DataLink", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Graph", null)
                        .WithMany("DataLinks")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("DataLinkId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DataLinkId");

                            b1.ToTable("DataLink");

                            b1.WithOwner()
                                .HasForeignKey("DataLinkId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("DataLinkId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("DataLinkId");

                            b1.ToTable("DataLink");

                            b1.WithOwner()
                                .HasForeignKey("DataLinkId");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Links.FlowLink", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Graph", null)
                        .WithMany("FlowLinks")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("FlowLinkId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("FlowLinkId");

                            b1.ToTable("FlowLink");

                            b1.WithOwner()
                                .HasForeignKey("FlowLinkId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("FlowLinkId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("FlowLinkId");

                            b1.ToTable("FlowLink");

                            b1.WithOwner()
                                .HasForeignKey("FlowLinkId");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Graph", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Chatbots.Chatbot", null)
                        .WithOne("Graph")
                        .HasForeignKey("ChatbotBuilderEngine.Domain.Graphs.Graph", "ChatbotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChatbotBuilderEngine.Domain.Conversations.Conversation", null)
                        .WithOne()
                        .HasForeignKey("ChatbotBuilderEngine.Domain.Graphs.Graph", "ConversationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Abstract.Node", null)
                        .WithOne()
                        .HasForeignKey("ChatbotBuilderEngine.Domain.Graphs.Graph", "CurrentNodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Abstract.Node", null)
                        .WithOne()
                        .HasForeignKey("ChatbotBuilderEngine.Domain.Graphs.Graph", "StartNodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderEngine.Domain.Workflows.Workflow", null)
                        .WithOne("Graph")
                        .HasForeignKey("ChatbotBuilderEngine.Domain.Graphs.Graph", "WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Interactions.InteractionInput", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Conversations.ValueObjects.InputMessage", null)
                        .WithOne("Input")
                        .HasForeignKey("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Interactions.InteractionInput", "InputMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.InteractionNode", null)
                        .WithOne("InteractionInput")
                        .HasForeignKey("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Interactions.InteractionInput", "InteractionNodeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.OptionData", "Option", b1 =>
                        {
                            b1.Property<Guid>("InteractionInputId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("EnumId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InteractionInputId");

                            b1.ToTable("InteractionInput");

                            b1.WithOwner()
                                .HasForeignKey("InteractionInputId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.TextData", "Text", b1 =>
                        {
                            b1.Property<Guid>("InteractionInputId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InteractionInputId");

                            b1.ToTable("InteractionInput");

                            b1.WithOwner()
                                .HasForeignKey("InteractionInputId");
                        });

                    b.Navigation("Option");

                    b.Navigation("Text");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Interactions.InteractionOutput", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Conversations.ValueObjects.OutputMessage", null)
                        .WithOne("Output")
                        .HasForeignKey("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Interactions.InteractionOutput", "OutputMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.TextData", "TextOutput", b1 =>
                        {
                            b1.Property<Guid>("InteractionOutputId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InteractionOutputId");

                            b1.ToTable("InteractionOutput");

                            b1.WithOwner()
                                .HasForeignKey("InteractionOutputId");
                        });

                    b.Navigation("TextOutput");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Workflows.Workflow", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ImageOutputPortInputPort", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.ImageData>", null)
                        .WithMany()
                        .HasForeignKey("InputPortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.ImageData>", null)
                        .WithMany()
                        .HasForeignKey("OutputPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptionOutputPortInputPort", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.OptionData>", null)
                        .WithMany()
                        .HasForeignKey("InputPortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.OptionData>", null)
                        .WithMany()
                        .HasForeignKey("OutputPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TextOutputPortInputPort", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.TextData>", null)
                        .WithMany()
                        .HasForeignKey("InputPortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.TextData>", null)
                        .WithMany()
                        .HasForeignKey("OutputPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.InteractionNode", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Enum", "OutputEnum")
                        .WithMany()
                        .HasForeignKey("OutputEnumId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("InteractionNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InteractionNodeId");

                            b1.ToTable("InteractionNode");

                            b1.WithOwner()
                                .HasForeignKey("InteractionNodeId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("InteractionNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("InteractionNodeId");

                            b1.ToTable("InteractionNode");

                            b1.WithOwner()
                                .HasForeignKey("InteractionNodeId");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("OutputEnum");

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.Prompt.PromptNode", b =>
                {
                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("PromptNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PromptNodeId");

                            b1.ToTable("PromptNode");

                            b1.WithOwner()
                                .HasForeignKey("PromptNodeId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("PromptNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("PromptNodeId");

                            b1.ToTable("PromptNode");

                            b1.WithOwner()
                                .HasForeignKey("PromptNodeId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.Prompt.PromptTemplate", "Template", b1 =>
                        {
                            b1.Property<Guid>("PromptNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PromptNodeId");

                            b1.ToTable("PromptNode");

                            b1.WithOwner()
                                .HasForeignKey("PromptNodeId");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Template")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.ImageData>", b =>
                {
                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.ImageData", "Data", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("StaticNode<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("StaticNode<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("StaticNode<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.Navigation("Data");

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.OptionData>", b =>
                {
                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.OptionData", "Data", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("EnumId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("StaticNode<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("StaticNode<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("StaticNode<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.Navigation("Data");

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.TextData>", b =>
                {
                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.TextData", "Data", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("StaticNode<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("StaticNode<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("StaticNode<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.Navigation("Data");

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.SwitchNode", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Enum", "Enum")
                        .WithMany()
                        .HasForeignKey("EnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("SwitchNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SwitchNodeId");

                            b1.ToTable("SwitchNode");

                            b1.WithOwner()
                                .HasForeignKey("SwitchNodeId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.OptionData", "SelectedOption", b1 =>
                        {
                            b1.Property<Guid>("SwitchNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("EnumId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SwitchNodeId");

                            b1.ToTable("SwitchNode");

                            b1.WithOwner()
                                .HasForeignKey("SwitchNodeId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("SwitchNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("SwitchNodeId");

                            b1.ToTable("SwitchNode");

                            b1.WithOwner()
                                .HasForeignKey("SwitchNodeId");
                        });

                    b.Navigation("Enum");

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("SelectedOption");

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.ImageData>", b =>
                {
                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.ImageData", "Data", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.Navigation("Data");

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.OptionData>", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.SwitchNode", null)
                        .WithOne("InputPort")
                        .HasForeignKey("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.OptionData>", "NodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.OptionData", "Data", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("EnumId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.Navigation("Data");

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.TextData>", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.InteractionNode", null)
                        .WithOne("TextInputPort")
                        .HasForeignKey("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.TextData>", "NodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.Prompt.PromptNode", null)
                        .WithMany("InputPorts")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.TextData", "Data", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.Navigation("Data");

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.ImageData>", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.ImageData>", null)
                        .WithOne("OutputPort")
                        .HasForeignKey("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.ImageData>", "NodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("OutputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OutputPortId");

                            b1.ToTable("OutputPort<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("OutputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("OutputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("OutputPortId");

                            b1.ToTable("OutputPort<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("OutputPortId");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.OptionData>", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.InteractionNode", null)
                        .WithOne("OptionOutputPort")
                        .HasForeignKey("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.OptionData>", "NodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.OptionData>", null)
                        .WithOne("OutputPort")
                        .HasForeignKey("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.OptionData>", "NodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("OutputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OutputPortId");

                            b1.ToTable("OutputPort<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("OutputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("OutputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("OutputPortId");

                            b1.ToTable("OutputPort<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("OutputPortId");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.TextData>", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.InteractionNode", null)
                        .WithOne("TextOutputPort")
                        .HasForeignKey("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.TextData>", "NodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.Prompt.PromptNode", null)
                        .WithOne("OutputPort")
                        .HasForeignKey("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.TextData>", "NodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.TextData>", null)
                        .WithOne("OutputPort")
                        .HasForeignKey("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.TextData>", "NodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("OutputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OutputPortId");

                            b1.ToTable("OutputPort<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("OutputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("OutputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("OutputPortId");

                            b1.ToTable("OutputPort<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("OutputPortId");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Chatbots.Chatbot", b =>
                {
                    b.Navigation("Graph")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Conversations.Conversation", b =>
                {
                    b.Navigation("InputMessages");

                    b.Navigation("OutputMessages");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Conversations.ValueObjects.InputMessage", b =>
                {
                    b.Navigation("Input")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Conversations.ValueObjects.OutputMessage", b =>
                {
                    b.Navigation("Output")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Graph", b =>
                {
                    b.Navigation("DataLinks");

                    b.Navigation("Enums");

                    b.Navigation("FlowLinks");

                    b.Navigation("InputPorts");

                    b.Navigation("Nodes");

                    b.Navigation("OutputPorts");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Workflows.Workflow", b =>
                {
                    b.Navigation("Graph")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.InteractionNode", b =>
                {
                    b.Navigation("InteractionInput");

                    b.Navigation("OptionOutputPort");

                    b.Navigation("TextInputPort");

                    b.Navigation("TextOutputPort");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.Prompt.PromptNode", b =>
                {
                    b.Navigation("InputPorts");

                    b.Navigation("OutputPort")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.ImageData>", b =>
                {
                    b.Navigation("OutputPort")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.OptionData>", b =>
                {
                    b.Navigation("OutputPort")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Data.TextData>", b =>
                {
                    b.Navigation("OutputPort")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.SwitchNode", b =>
                {
                    b.Navigation("InputPort")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
