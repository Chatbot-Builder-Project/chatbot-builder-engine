// <auto-generated />
using System;
using ChatbotBuilderEngine.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChatbotBuilderEngine.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241214173801_AddInputAndOutputPorts")]
    partial class AddInputAndOutputPorts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Abstract.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.ImageData>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("InputPort<ImageData>");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.OptionData>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("InputPort<OptionData>");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.TextData>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("InputPort<TextData>");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.ImageData>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NodeId")
                        .IsUnique();

                    b.ToTable("OutputPort<ImageData>");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.OptionData>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NodeId")
                        .IsUnique();

                    b.ToTable("OutputPort<OptionData>");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.TextData>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NodeId")
                        .IsUnique();

                    b.ToTable("OutputPort<TextData>");
                });

            modelBuilder.Entity("ImageOutputPortInputPort", b =>
                {
                    b.Property<Guid>("OutputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OutputPortId", "InputPortId");

                    b.HasIndex("InputPortId");

                    b.ToTable("ImageOutputPortInputPort");
                });

            modelBuilder.Entity("OptionOutputPortInputPort", b =>
                {
                    b.Property<Guid>("OutputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OutputPortId", "InputPortId");

                    b.HasIndex("InputPortId");

                    b.ToTable("OptionOutputPortInputPort");
                });

            modelBuilder.Entity("TextOutputPortInputPort", b =>
                {
                    b.Property<Guid>("OutputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OutputPortId", "InputPortId");

                    b.HasIndex("InputPortId");

                    b.ToTable("TextOutputPortInputPort");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.ValueObjects.Data.ImageData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderEngine.Domain.Graphs.Abstract.Node");

                    b.ToTable("StaticNode<ImageData>");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.ValueObjects.Data.OptionData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderEngine.Domain.Graphs.Abstract.Node");

                    b.ToTable("StaticNode<OptionData>");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.ValueObjects.Data.TextData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderEngine.Domain.Graphs.Abstract.Node");

                    b.ToTable("StaticNode<TextData>");
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.ImageData>", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Abstract.Node", null)
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ChatbotBuilderEngine.Domain.ValueObjects.Data.ImageData", "Data", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.Navigation("Data");

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.OptionData>", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Abstract.Node", null)
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ChatbotBuilderEngine.Domain.ValueObjects.Data.OptionData", "Data", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("EnumId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.Navigation("Data");

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.TextData>", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Abstract.Node", null)
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ChatbotBuilderEngine.Domain.ValueObjects.Data.TextData", "Data", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.Navigation("Data");

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.ImageData>", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Abstract.Node", null)
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.ValueObjects.Data.ImageData>", null)
                        .WithOne("OutputPort")
                        .HasForeignKey("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.ImageData>", "NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("OutputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OutputPortId");

                            b1.ToTable("OutputPort<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("OutputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("OutputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("OutputPortId");

                            b1.ToTable("OutputPort<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("OutputPortId");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.OptionData>", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Abstract.Node", null)
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.ValueObjects.Data.OptionData>", null)
                        .WithOne("OutputPort")
                        .HasForeignKey("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.OptionData>", "NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("OutputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OutputPortId");

                            b1.ToTable("OutputPort<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("OutputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("OutputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("OutputPortId");

                            b1.ToTable("OutputPort<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("OutputPortId");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.TextData>", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Abstract.Node", null)
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.ValueObjects.Data.TextData>", null)
                        .WithOne("OutputPort")
                        .HasForeignKey("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.TextData>", "NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("OutputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OutputPortId");

                            b1.ToTable("OutputPort<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("OutputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("OutputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("OutputPortId");

                            b1.ToTable("OutputPort<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("OutputPortId");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ImageOutputPortInputPort", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.ImageData>", null)
                        .WithMany()
                        .HasForeignKey("InputPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.ImageData>", null)
                        .WithMany()
                        .HasForeignKey("OutputPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptionOutputPortInputPort", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.OptionData>", null)
                        .WithMany()
                        .HasForeignKey("InputPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.OptionData>", null)
                        .WithMany()
                        .HasForeignKey("OutputPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TextOutputPortInputPort", b =>
                {
                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.TextData>", null)
                        .WithMany()
                        .HasForeignKey("InputPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderEngine.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderEngine.Domain.ValueObjects.Data.TextData>", null)
                        .WithMany()
                        .HasForeignKey("OutputPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.ValueObjects.Data.ImageData>", b =>
                {
                    b.OwnsOne("ChatbotBuilderEngine.Domain.ValueObjects.Data.ImageData", "Data", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("StaticNode<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("StaticNode<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("StaticNode<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.Navigation("Data");

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.ValueObjects.Data.OptionData>", b =>
                {
                    b.OwnsOne("ChatbotBuilderEngine.Domain.ValueObjects.Data.OptionData", "Data", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("EnumId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("StaticNode<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("StaticNode<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("StaticNode<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.Navigation("Data");

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.ValueObjects.Data.TextData>", b =>
                {
                    b.OwnsOne("ChatbotBuilderEngine.Domain.ValueObjects.Data.TextData", "Data", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("StaticNode<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("StaticNode<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.OwnsOne("ChatbotBuilderEngine.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("StaticNode<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.Navigation("Data");

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.ValueObjects.Data.ImageData>", b =>
                {
                    b.Navigation("OutputPort")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.ValueObjects.Data.OptionData>", b =>
                {
                    b.Navigation("OutputPort")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderEngine.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderEngine.Domain.ValueObjects.Data.TextData>", b =>
                {
                    b.Navigation("OutputPort")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
